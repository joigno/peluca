{"version":3,"sources":["logo.png","App.js","reportWebVitals.js","index.js"],"names":["pelucaAddress","App","useState","setData","requestAccount","a","window","ethereum","alert","request","method","fetchData","accounts","provider","ethers","providers","Web3Provider","contract","Contract","Peluca","abi","dropDisabled","balanceOf","balance","totalSupply","supply","getNextSupplyTarget","nextSupplyTarget","isDeflationaryPeriod","isDeflationary","aux","div","utils","parseUnits","object","String","console","log","useEffect","document","title","className","style","backgroundColor","fontFamily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"g07CAAe,I,uBCOTA,EAAgB,6CAkNPC,MAtLf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACCC,GADD,oBASEC,IATF,2EASb,sBAAAC,EAAA,yDACiC,qBAApBC,OAAOC,SADpB,gBAEIC,MAAM,gEAFV,sCAKiBF,OAAOC,SAASE,QAAQ,CAACC,OAAQ,wBALlD,oFATa,+BA0CEC,IA1CF,2EA0Cb,8CAAAN,EAAA,yDACgC,qBAApBC,OAAOC,SADnB,iCAE2BH,IAF3B,cAEUQ,EAFV,OAGUC,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,OAAOC,UACpDU,EAAW,IAAIH,IAAOI,SAASlB,EAAemB,EAAOC,IAAKP,GAC5DQ,EAAe,GALvB,mBAO4BJ,EAASK,UAAUV,EAAS,IAPxD,eAOYW,EAPZ,iBAQyBN,EAASO,cARlC,eAQUC,EARV,iBASmCR,EAASS,sBAT5C,eASUC,EATV,iBAUmCV,EAASW,uBAV5C,SAUYC,EAVZ,UAYQR,EAAe,cAEbS,EAAMH,EAAiBI,IAAIjB,IAAOkB,MAAMC,WAAW,wBAErDN,EADU,GAAPG,EACgBH,EAAiBI,IAAIjB,IAAOkB,MAAMC,WAAW,MAE7CN,EAAiBI,IAAIjB,IAAOkB,MAAMC,WAAW,wBAElEH,EAAML,EAAOM,IAAIjB,IAAOkB,MAAMC,WAAW,wBAEvCR,EADU,GAAPK,EACML,EAAOM,IAAIjB,IAAOkB,MAAMC,WAAW,MAEnCR,EAAOM,IAAIjB,IAAOkB,MAAMC,WAAW,wBAExCC,EAAS,CACb,QAAWC,OAAOZ,EAAQ,KAAD,IAAE,GAAI,KAAO,UACtC,OAAUY,OAAOV,GACjB,iBAAoBU,OAAOR,GAC3B,eAAkBE,EAAiB,kBAAoB,kBACvD,cAAiB,kBACjB,aAAgBR,GAElBlB,EAAQ+B,GAlCd,kDAoCME,QAAQC,IAAR,MASAlC,EARe,CACb,QAAW,eACX,OAAU,eACV,iBAAoB,eACpB,eAAkB,eAClB,cAAiB,iBACjB,aAAgBkB,IA3CxB,gCAwDIlB,EARe,CACb,QAAW,eACX,OAAU,eACV,iBAAoB,eACpB,eAAkB,eAClB,cAAiB,iDACjB,aAAgB,KAtDtB,2DA1Ca,sBAgLb,OA5KAmC,qBAAU,WACRC,SAASC,MAAQ,UACjB7B,MACC,IA0KD,qBAAK8B,UAAU,MAAMC,MAAO,CAAEC,gBAAiB,UAAWC,WAAY,kDCxM3DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.d8d87b44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3d1de7f0.png\";","import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './logo.png';\nimport Peluca from './artifacts/contracts/Peluca.sol/Peluca.json';\nimport PelucaDropper from './artifacts/contracts/PelucaDropper.sol/PelucaDropper.json';\n\nconst pelucaAddress = '0x353395eB36E03Fe72Dce4EE77558688969283F91';\nconst pelucaDropperAddress = '0x8C449A97Cb028840158F9D6C0FEa10Ac8E6E9cb3';\n\n// npx hardhat compile\n// npx hardhat node // en otra consola\n// npx hardhat run scripts/deploy.js --network localhost\n\n// Host in Github https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n\n// npm install @openzeppelin/contracts\n\n// verify in BscScan\n// https://docs.binance.org/smart-chain/developer/deploy/verify.html\n\n// deploy in BSC\n// https://docs.binance.org/smart-chain/developer/deploy/hardhat.html\n\n// flatten code\n// npx hardhat flatten\n\n// Deploy to Github Pages\n// npm run deploy\n\n// https://github.com/joigno/peluca/settings/pages\n\n\n\n\nfunction App() {\n  const [ data, setData] = useState({});\n  var addressAmigo = '0x0';\n\n  useEffect(() => {\n    document.title = \"$PELUCA\"\n    fetchData();\n  }, [])\n\n  async function requestAccount() {\n    if (typeof window.ethereum === 'undefined') {\n      alert(\"Install MetaMask wallet plugin: https://metamask.io/download\");\n    } else\n    {\n      return await window.ethereum.request({method: 'eth_requestAccounts'});\n    }\n  }\n\n  async function switchToBinance() {\n    let ethereum = window.ethereum;\n    const data = [{\n        chainId: '0x38',\n        chainName: 'Binance Smart Chain',\n        nativeCurrency:\n            {\n                name: 'BNB',\n                symbol: 'BNB',\n                decimals: 18\n            },\n        rpcUrls: ['https://bsc-dataseed.binance.org/'],\n        blockExplorerUrls: ['https://bscscan.com/'],\n    }]\n    /* eslint-disable */\n    const tx = await ethereum.request({method: 'wallet_addEthereumChain', params:data}).catch()\n    if (tx) {\n        console.log(tx)\n    }\n    fetchData();\n  }\n\n  // https://docs.metamask.io/guide/rpc-api.html#usage-with-wallet-switchethereumchain\n  // https://docs.metamask.io/guide/rpc-api.html#wallet-addethereumchain\n  async function fetchData() {\n    if(typeof window.ethereum !== 'undefined') {\n      const accounts = await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(pelucaAddress, Peluca.abi, provider);\n      var dropDisabled = '';\n      try {\n        const balance = await contract.balanceOf(accounts[0]);\n        var supply = await contract.totalSupply();\n        var nextSupplyTarget = await contract.getNextSupplyTarget();\n        const isDeflationary = await contract.isDeflationaryPeriod();\n        if (isDeflationary) {\n          dropDisabled = '(inactivo)';\n        }\n        var aux = nextSupplyTarget.div(ethers.utils.parseUnits(\"1000000000000000000\"));\n        if  (aux == 0) {\n          nextSupplyTarget = nextSupplyTarget.div(ethers.utils.parseUnits(\"1\"));\n        } else {\n          nextSupplyTarget = nextSupplyTarget.div(ethers.utils.parseUnits(\"1000000000000000000\"));\n        }\n        aux = supply.div(ethers.utils.parseUnits(\"1000000000000000000\"));\n        if  (aux == 0) {\n          supply = supply.div(ethers.utils.parseUnits(\"1\"));\n        } else {\n          supply = supply.div(ethers.utils.parseUnits(\"1000000000000000000\"));\n        }\n        const object = {\n          'balance': String(balance/(10**18)) + ' PELUCA',\n          'supply': String(supply),\n          'nextSupplyTarget': String(nextSupplyTarget),\n          'isDeflationary': isDeflationary ? 'SI (Permanente)' : \"NO (Todav√≠a)\",\n          'connectedText': 'Conectado (BSC)',\n          'dropDisabled': dropDisabled,\n        };\n        setData(object);\n      } catch(err) {\n        console.log(err);\n        const object = {\n          'balance': 'Sin Conexion',\n          'supply': 'Sin Conexion',\n          'nextSupplyTarget': 'Sin Conexion',\n          'isDeflationary': 'Sin Conexion',\n          'connectedText': 'CONECTAR a BSC',\n          'dropDisabled': dropDisabled,\n        };\n        setData(object);\n      }\n    } else {\n      const object = {\n        'balance': 'Sin Conexion',\n        'supply': 'Sin Conexion',\n        'nextSupplyTarget': 'Sin Conexion',\n        'isDeflationary': 'Sin Conexion',\n        'connectedText': 'INSTALAR BILLETERA METAMASK http://metamask.io',\n        'dropDisabled': '',\n      };\n      setData(object);\n    }\n  }\n\n  async function mint() {\n    if(typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(pelucaAddress, Peluca.abi, signer);\n      const transaction = await contract.mint();\n      setData({});\n      await transaction.wait();\n      fetchData();\n    }\n  }\n\n  async function mint120() {\n    if(typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(pelucaDropperAddress, PelucaDropper.abi, signer);\n      const transaction = await contract.mintMany(ethers.utils.parseUnits(\"120\"));\n      setData({});\n      await transaction.wait();\n      fetchData();\n    }\n  }\n\n  async function mint1200() {\n    if(typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(pelucaDropperAddress, PelucaDropper.abi, signer);\n      const transaction = await contract.mintMany(ethers.utils.parseUnits(\"1200\"));\n      setData({});\n      await transaction.wait();\n      fetchData();\n    }\n  }\n\n  async function mint12000() {\n    if(typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(pelucaDropperAddress, PelucaDropper.abi, signer);\n      const transaction = await contract.mintMany(ethers.utils.parseUnits(\"12000\"));\n      setData({});\n      await transaction.wait();\n      fetchData();\n    }\n  }\n\n  async function transferAmigo() {\n    if(typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(pelucaAddress, Peluca.abi, signer);\n      const transaction = await contract.transfer(addressAmigo, ethers.utils.parseUnits(\"0.1\"));\n      setData({});\n      await transaction.wait();\n      fetchData();\n    }\n  }\n\n  async function setAmigoAddress(_addressAmigo) {\n    addressAmigo = _addressAmigo;\n    //setData({'addressAmigo': addressAmigo})\n  }\n\n\n  // 2677F0 CELESTE AZUL\n  // 74aedf CELESTE BANDERA\n  // Lucida Grande, Helvetica, Arial, sans-serif\n  return (\n    <div className=\"App\" style={{ backgroundColor: \"#74aedf\", fontFamily: 'Lucida Grande, Helvetica, Arial, sans-serif' }}>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}